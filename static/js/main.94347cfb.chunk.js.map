{"version":3,"sources":["serviceWorker.js","components/maps/Card.js","components/maps/Page.js","components/maps/MapsGenerator.js","components/words/WordsGenerator.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","list","item","count","i","this","getEmptyIndex","randomIndex","_","random","length","props","options","size","width","height","times","constant","forIn","itemKey","placeItemsRandomly","renderGrid","items","itemsInRow","background","home","guest","grid","row","forEach","index","push","className","map","cell","React","PureComponent","Page","id","renderCards","value","MapsGenerator","state","withSilver","classic","doubleBlack","element","document","getElementById","html2pdf","key","e","setState","Number","target","type","onChange","onCountChange","bind","onClick","onGenerate","black","silver","neutral","WordsGenerator","text","filename","allWordsList","uniq","toUpperCase","replace","split","listPerPage","slice","rows","placeholder","page","word","classes","classnames","ReactDOM","render","StrictMode","style","paddingLeft","path","to","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94347cfb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport _ from \"lodash\";\r\n\r\nclass Card extends React.PureComponent {\r\n    /**\r\n     * Place items randomly on empty spots in array\r\n     * @param list {Array} list of items\r\n     * @param item {string}\r\n     * @param count {number} how many times should be item in the list\r\n     * @return {Array}\r\n     */\r\n    placeItemsRandomly(list, item, count) {\r\n        for (let i=0; i<count; i++) {\r\n            let emptyIndex = this.getEmptyIndex(list);\r\n            list[emptyIndex] = item;\r\n        }\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * Get empty index in list\r\n     * @param list {Array}\r\n     * @return {number} index\r\n     */\r\n    getEmptyIndex(list) {\r\n        const randomIndex = _.random(list.length - 1);\r\n        if (!list[randomIndex]) {\r\n            return randomIndex;\r\n        } else {\r\n            return this.getEmptyIndex(list);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        const options = props.options;\r\n        const size = props.width * props.height;\r\n\r\n        // Prepare array full of nulls\r\n        let list = _.times(size, _.constant(null));\r\n\r\n        _.forIn(options, (count, itemKey) => {\r\n            list = this.placeItemsRandomly(list, itemKey, count);\r\n        });\r\n\r\n        return this.renderGrid(list, props.width);\r\n    };\r\n\r\n    renderGrid(items, itemsInRow) {\r\n        const options = this.props.options;\r\n        const background = options.home > options.guest ? 'home' : 'guest';\r\n\r\n        let grid = [];\r\n        let row = [];\r\n        _.forEach(items, (item, index) => {\r\n            row.push(item);\r\n            if ((index + 1) % itemsInRow === 0) {\r\n                grid.push(row);\r\n                row = [];\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div className=\"card-wrapper\">\r\n                <div className={\"card-starter left \" + background}/>\r\n                <div className={\"card-starter top \" + background}/>\r\n                <div className={\"card-starter right \" + background}/>\r\n                <div className={\"card-starter bottom \" + background}/>\r\n\r\n                <div className=\"card\">\r\n                    {_.map(grid, row => (\r\n                            <div className=\"card-row\">\r\n                                {_.map(row, cell => (<div className={`cell ${cell}`}/>))}\r\n                            </div>\r\n                        )\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport _ from \"lodash\";\r\nimport Card from \"./Card\";\r\n\r\nclass Page extends React.PureComponent {\r\n    render() {\r\n        return (\r\n            <div className=\"page\" id=\"page\">\r\n                {this.renderCards(12)}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    renderCards(count) {\r\n        const props = this.props;\r\n\r\n        let list = _.times(count, _.constant(null));\r\n        return _.map(list, (value, index) => {\r\n            const options = {...props.options};\r\n\r\n           if (index % 2 === 0) {\r\n               options.home -= 1;\r\n               options.guest += 1;\r\n           }\r\n\r\n           return (\r\n               <Card\r\n                   width={props.width}\r\n                   height={props.height}\r\n                   options={options}\r\n               />\r\n           );\r\n        });\r\n    }\r\n}\r\n\r\nexport default Page;","import React from 'react';\r\nimport html2pdf from \"html2pdf.js\";\r\nimport Page from \"./Page\";\r\nimport _ from \"lodash\";\r\n\r\nclass MapsGenerator extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            withSilver: 1,\r\n            classic: 1,\r\n            doubleBlack: 1\r\n        }\r\n    }\r\n\r\n    onGenerate() {\r\n        var element = document.getElementById('maps');\r\n        html2pdf(element);\r\n    }\r\n\r\n    onCountChange(key, e) {\r\n        this.setState({\r\n            [key]: Number(e.target.value)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const withSilver = _.times(this.state.withSilver, _.constant(null));\r\n        const classic = _.times(this.state.classic, _.constant(null));\r\n        const doubleBlack = _.times(this.state.doubleBlack, _.constant(null));\r\n\r\n        return (\r\n            <div className=\"maps-generator\">\r\n                <h2>Generátor map</h2>\r\n                <p>Pro náhodné generování map zadej počet stránek pro jednotlivé verze do políček níže</p>\r\n                <div className=\"form\">\r\n                    <label>\r\n                        Klasická hra:\r\n                        <input type=\"text\" value={this.state.classic} onChange={this.onCountChange.bind(this, 'classic')}/>\r\n                    </label>\r\n                    <label>\r\n                        Černá a stříbrná:\r\n                        <input type=\"text\" value={this.state.withSilver} onChange={this.onCountChange.bind(this, 'withSilver')}/>\r\n                    </label>\r\n                    <label>\r\n                        Dvě černé:\r\n                        <input type=\"text\" value={this.state.doubleBlack} onChange={this.onCountChange.bind(this, 'doubleBlack')}/>\r\n                    </label>\r\n                </div>\r\n                <button onClick={this.onGenerate}>Ulož do PDF</button>\r\n                <div className=\"maps\" id=\"maps\">\r\n                    {classic.map(item => (\r\n                        <>\r\n                            <Page\r\n                                width={5}\r\n                                height={5}\r\n                                options={{\r\n                                    black: 1,\r\n                                    silver: 0,\r\n                                    home: 9,\r\n                                    guest: 8,\r\n                                    neutral: 7\r\n                                }}\r\n                            />\r\n                            <div className=\"html2pdf__page-break\"/>\r\n                        </>\r\n                    ))}\r\n                    {withSilver.map(item => (\r\n                        <>\r\n                            <Page\r\n                                width={5}\r\n                                height={5}\r\n                                options={{\r\n                                    black: 1,\r\n                                    silver: 1,\r\n                                    home: 9,\r\n                                    guest: 8,\r\n                                    neutral: 6\r\n                                }}\r\n                            />\r\n                            <div className=\"html2pdf__page-break\"/>\r\n                        </>\r\n                    ))}\r\n                    {doubleBlack.map(item => (\r\n                        <>\r\n                            <Page\r\n                                width={5}\r\n                                height={5}\r\n                                options={{\r\n                                    black: 2,\r\n                                    silver: 0,\r\n                                    home: 9,\r\n                                    guest: 8,\r\n                                    neutral: 6\r\n                                }}\r\n                            />\r\n                            <div className=\"html2pdf__page-break\"/>\r\n                        </>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default MapsGenerator;","import React from 'react';\r\nimport html2pdf from \"html2pdf.js\";\r\nimport _ from \"lodash\";\r\nimport words from \"./words\";\r\nimport classnames from 'classnames';\r\n\r\nconst STEP = 24;\r\n\r\nclass WordsGenerator extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          text: \"\"\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onGenerate() {\r\n        var element = document.getElementById('words');\r\n        html2pdf(element, {filename: 'slova.pdf'});\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({text: e.target.value})\r\n    }\r\n\r\n    render() {\r\n        const allWordsList = _.uniq(this.state.text.toUpperCase().replace(/ /g,'').split(\",\"));\r\n        let listPerPage = [];\r\n\r\n        for (let i=0; i < allWordsList.length; i+=STEP) {\r\n            listPerPage.push(allWordsList.slice(i, i+STEP));\r\n        }\r\n\r\n        return (\r\n            <div className=\"words-generator\">\r\n                <h2>Vytváření slov</h2>\r\n                <p>Do pole níže zadej slova oddělená čárkou:</p>\r\n                <textarea rows=\"8\" onChange={this.onChange} value={this.state.text} placeholder=\"Sem zadej slova oddělená čárkou\"/>\r\n                <button onClick={this.onGenerate}>Ulož do PDF</button>\r\n                <div className=\"words\" id=\"words\">\r\n                    {listPerPage.map((page, index) =>\r\n                        <>\r\n                            <div className=\"word-page\" id=\"page\">\r\n                                {page.map((word,index) => {\r\n                                    const length = word.length;\r\n                                    const classes = classnames(\r\n                                        \"word\", {\r\n                                            \"smaller\": length > 12\r\n                                        }\r\n                                    );\r\n\r\n                                    return (\r\n                                        <div key={index} className={classes}>\r\n                                            <div>{word}</div>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                                )}\r\n                            </div>\r\n                            <div className=\"html2pdf__page-break\"/>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default WordsGenerator;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport MapsGenerator from \"./components/maps/MapsGenerator\";\nimport WordsGenerator from \"./components/words/WordsGenerator\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n          <div style={{paddingLeft: 20}}>\n              {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n              <Switch>\n                  <Route path=\"/words\">\n                      <WordsGenerator />\n                  </Route>\n                  <Route path=\"/maps\">\n                      <MapsGenerator />\n                  </Route>\n                  <Route path=\"/\">\n                      <h1>Krycí jména</h1>\n                      <nav>\n                          <ul>\n                              <li>\n                                  <Link to=\"/maps\">Generátor map</Link>\n                              </li>\n                              <li>\n                                  <Link to=\"/words\">Vytváření slov</Link>\n                              </li>\n                          </ul>\n                      </nav>\n                  </Route>\n              </Switch>\n          </div>\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}